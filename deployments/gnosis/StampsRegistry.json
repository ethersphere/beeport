{
  "address": "0x2f934E07b40ce9cE97e8fb06B2BCE00cd72fEc92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swarmContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        }
      ],
      "name": "BatchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNormalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "BatchDepthIncrease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        }
      ],
      "name": "BatchMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupAmountPerChunk",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "BatchTopUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SwarmContractUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BZZ_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "batchPayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialBalancePerChunk",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        }
      ],
      "name": "createBatchRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        }
      ],
      "name": "getBatchPayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerBatchCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getOwnerBatches",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "batchId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalisedBalance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "bucketDepth",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "immutable_",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct StampsRegistry.BatchInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_newDepth",
          "type": "uint8"
        }
      ],
      "name": "increaseBatchDepth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_normalisedBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nodeAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_immutable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "migrateBatchRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerBatches",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "normalisedBalance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "bucketDepth",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "immutable_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swarmStampContract",
      "outputs": [
        {
          "internalType": "contract ISwarmContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_batchId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_topupAmountPerChunk",
          "type": "uint256"
        }
      ],
      "name": "topUpBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newSwarmContractAddress",
          "type": "address"
        }
      ],
      "name": "updateSwarmContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad28295b1d6e16d42c934166fc4fbc35e016ec83aee99ed70531643a0b080ca3",
  "receipt": {
    "to": null,
    "from": "0xb1C7F17Ed88189Abf269Bf68A3B2Ed83C5276aAe",
    "contractAddress": "0x2f934E07b40ce9cE97e8fb06B2BCE00cd72fEc92",
    "transactionIndex": 7,
    "gasUsed": "1219958",
    "logsBloom": "0x
    "blockHash": "0x576b8be736ccc61c4f6d6704e433ddbe00c14e1a8d83f15377749f27cd694fc9",
    "transactionHash": "0xad28295b1d6e16d42c934166fc4fbc35e016ec83aee99ed70531643a0b080ca3",
    "logs": [],
    "blockNumber": 40310211,
    "cumulativeGasUsed": "1835413",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x45a1502382541Cd610CC9068e88727426b696293"
  ],
  "numDeployments": 4,
  "solcInputHash": "f94e10b834c3bdf51b4ed6c67334af98",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swarmContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"}],\"name\":\"BatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNormalisedBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BatchDepthIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"}],\"name\":\"BatchMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupAmountPerChunk\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BatchTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SwarmContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BZZ_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"batchPayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialBalancePerChunk\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"}],\"name\":\"createBatchRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"}],\"name\":\"getBatchPayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerBatchCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerBatches\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct StampsRegistry.BatchInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_newDepth\",\"type\":\"uint8\"}],\"name\":\"increaseBatchDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_immutable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"migrateBatchRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerBatches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalisedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bucketDepth\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"immutable_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swarmStampContract\",\"outputs\":[{\"internalType\":\"contract ISwarmContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_batchId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_topupAmountPerChunk\",\"type\":\"uint256\"}],\"name\":\"topUpBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwarmContractAddress\",\"type\":\"address\"}],\"name\":\"updateSwarmContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)\":{\"params\":{\"_bucketDepth\":\"Bucket depth\",\"_depth\":\"Depth of the batch\",\"_immutable\":\"Whether the batch is immutable\",\"_initialBalancePerChunk\":\"Initial balance per chunk\",\"_nodeAddress\":\"Address of the node that will own the batch\",\"_nonce\":\"Unique nonce for the batch\",\"_owner\":\"Address that pays for the batch, but not the owner of the batch\"}},\"getBatchPayer(bytes32)\":{\"params\":{\"_batchId\":\"The ID of the batch\"},\"returns\":{\"_0\":\"The address of the payer\"}},\"getOwnerBatchCount(address)\":{\"params\":{\"_owner\":\"The address of the owner\"},\"returns\":{\"_0\":\"The number of batches\"}},\"getOwnerBatches(address)\":{\"params\":{\"_owner\":\"The address of the owner\"},\"returns\":{\"_0\":\"Array of BatchInfo for the owner\"}},\"increaseBatchDepth(bytes32,uint8)\":{\"params\":{\"_batchId\":\"The id of the batch to increase depth\",\"_newDepth\":\"The new depth for the batch (must be greater than current depth)\"}},\"migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)\":{\"params\":{\"_batchId\":\"Batch ID from the old contract\",\"_bucketDepth\":\"Bucket depth from the old batch\",\"_depth\":\"Depth from the old batch\",\"_immutable\":\"Immutable flag from the old batch\",\"_nodeAddress\":\"Node address from the old batch\",\"_normalisedBalance\":\"Normalised balance from the old batch\",\"_owner\":\"Address that owns the batch\",\"_timestamp\":\"Original timestamp from the old batch\",\"_totalAmount\":\"Total amount from the old batch\"}},\"topUpBatch(bytes32,uint256)\":{\"params\":{\"_batchId\":\"The id of the batch to top up\",\"_topupAmountPerChunk\":\"The amount of additional tokens to add per chunk\"}},\"transferAdmin(address)\":{\"params\":{\"_newAdmin\":\"The address of the new admin\"}},\"updateSwarmContract(address)\":{\"params\":{\"_newSwarmContractAddress\":\"New address of the swarm contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)\":{\"notice\":\"Creates a new batch and registers the payer\"},\"getBatchPayer(bytes32)\":{\"notice\":\"Get the payer address for a specific batch ID\"},\"getOwnerBatchCount(address)\":{\"notice\":\"Get the number of batches for a specific owner\"},\"getOwnerBatches(address)\":{\"notice\":\"Get all batches for a specific owner\"},\"increaseBatchDepth(bytes32,uint8)\":{\"notice\":\"Increase the depth of an existing batch\"},\"migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)\":{\"notice\":\"Migrate batch data from old contract without performing token transfers\"},\"topUpBatch(bytes32,uint256)\":{\"notice\":\"Top up an existing batch\"},\"transferAdmin(address)\":{\"notice\":\"Transfer admin rights to a new address\"},\"updateSwarmContract(address)\":{\"notice\":\"Updates the swarm contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StampsRegistry.sol\":\"StampsRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/StampsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/*\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n                                              \\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\n    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\n    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557  \\u255a\\u2588\\u2588\\u2554\\u255d  \\n    \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\n    \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\n*/\\n\\n/**\\n * @title StampsRegistry\\n * @notice A registry for Swarm Postage Stamps\\n * @dev Note on naming convention: The terms \\\"Batch\\\" and \\\"Stamps\\\" are used interchangeably throughout the codebase.\\n *      \\\"Batch\\\" refers to a collection of stamps created in a single transaction and is the terminology used in the\\n *      Swarm protocol. \\\"Stamps\\\" is a more user-friendly term used to describe the same concept.\\n *      For example: \\\"BatchCreated\\\" event, but \\\"StampsRegistry\\\" contract.\\n */\\n\\ninterface ISwarmContract {\\n    function createBatch(\\n        address _owner,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external;\\n\\n    function topUp(bytes32 _batchId, uint256 _topupAmountPerChunk) external;\\n    \\n    function increaseDepth(bytes32 _batchId, uint8 _newDepth) external;\\n\\n    function currentTotalOutPayment() external view returns (uint256);\\n    \\n    function remainingBalance(bytes32 _batchId) external view returns (uint256);\\n    \\n    function batchOwner(bytes32 _batchId) external view returns (address);\\n    \\n    function batchDepth(bytes32 _batchId) external view returns (uint8);\\n    \\n    function batchBucketDepth(bytes32 _batchId) external view returns (uint8);\\n    \\n    function batchImmutableFlag(bytes32 _batchId) external view returns (bool);\\n    \\n    function batchNormalisedBalance(bytes32 _batchId) external view returns (uint256);\\n    \\n    function batchLastUpdatedBlockNumber(bytes32 _batchId) external view returns (uint256);\\n}\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\\ncontract StampsRegistry {\\n    // State variables\\n    ISwarmContract public swarmStampContract;\\n    IERC20 public constant BZZ_TOKEN =\\n        IERC20(0xdBF3Ea6F5beE45c02255B2c26a16F300502F68da);\\n    mapping(bytes32 => address) public batchPayers;\\n    address public admin;\\n    \\n    // New data structure to store batch information by owner\\n    struct BatchInfo {\\n        bytes32 batchId;\\n        uint256 totalAmount;\\n        uint256 normalisedBalance;\\n        address nodeAddress;\\n        address payer;\\n        uint8 depth;\\n        uint8 bucketDepth;\\n        bool immutable_;\\n        uint256 timestamp;\\n    }\\n    \\n    // Mapping from owner address to array of BatchInfo\\n    mapping(address => BatchInfo[]) public ownerBatches;\\n    \\n    // Events\\n    event BatchCreated(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 normalisedBalance,\\n        address indexed owner,\\n        address indexed payer,\\n        uint8 depth,\\n        uint8 bucketDepth,\\n        bool immutable_\\n    );\\n\\n    event BatchTopUp(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 topupAmountPerChunk,\\n        address indexed owner\\n    );\\n\\n    event BatchDepthIncrease(\\n        bytes32 indexed batchId,\\n        uint8 newDepth,\\n        uint256 newNormalisedBalance,\\n        address indexed owner\\n    );\\n\\n    event BatchMigrated(\\n        bytes32 indexed batchId,\\n        uint256 totalAmount,\\n        uint256 normalisedBalance,\\n        address indexed owner,\\n        address indexed payer,\\n        uint8 depth,\\n        uint8 bucketDepth,\\n        bool immutable_\\n    );\\n    event SwarmContractUpdated(address oldAddress, address newAddress);\\n    event AdminTransferred(address oldAdmin, address newAdmin);\\n\\n    // Custom errors\\n    error TransferFailed();\\n    error ApprovalFailed();\\n\\n    // Modifiers\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    constructor(address _swarmContractAddress) {\\n        swarmStampContract = ISwarmContract(_swarmContractAddress);\\n        admin = msg.sender;\\n    }\\n\\n    ////////////////////////////////////////\\n    //              SETTERS               //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Transfer admin rights to a new address\\n     * @param _newAdmin The address of the new admin\\n     */\\n    function transferAdmin(address _newAdmin) external onlyAdmin {\\n        require(_newAdmin != address(0), \\\"New admin cannot be the zero address\\\");\\n        address oldAdmin = admin;\\n        admin = _newAdmin;\\n        emit AdminTransferred(oldAdmin, _newAdmin);\\n    }\\n\\n    /**\\n     * @notice Updates the swarm contract address\\n     * @param _newSwarmContractAddress New address of the swarm contract\\n     */\\n    function updateSwarmContract(\\n        address _newSwarmContractAddress\\n    ) external onlyAdmin {\\n        address oldAddress = address(swarmStampContract);\\n        swarmStampContract = ISwarmContract(_newSwarmContractAddress);\\n        emit SwarmContractUpdated(oldAddress, _newSwarmContractAddress);\\n    }\\n\\n    /**\\n     * @notice Migrate batch data from old contract without performing token transfers\\n     * @param _owner Address that owns the batch\\n     * @param _batchId Batch ID from the old contract\\n     * @param _totalAmount Total amount from the old batch\\n     * @param _normalisedBalance Normalised balance from the old batch\\n     * @param _nodeAddress Node address from the old batch\\n     * @param _depth Depth from the old batch\\n     * @param _bucketDepth Bucket depth from the old batch\\n     * @param _immutable Immutable flag from the old batch\\n     * @param _timestamp Original timestamp from the old batch\\n     */\\n    function migrateBatchRegistry(\\n        address _owner,\\n        bytes32 _batchId,\\n        uint256 _totalAmount,\\n        uint256 _normalisedBalance,\\n        address _nodeAddress,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bool _immutable,\\n        uint256 _timestamp\\n    ) external onlyAdmin {\\n        // Store the payer information\\n        batchPayers[_batchId] = _owner;\\n            \\n        // Store batch information in the owner's batches array\\n        ownerBatches[_owner].push(BatchInfo({\\n            batchId: _batchId,\\n            totalAmount: _totalAmount,\\n            normalisedBalance: _normalisedBalance,\\n            nodeAddress: _nodeAddress,\\n            payer: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutable_: _immutable,\\n            timestamp: _timestamp\\n        }));\\n\\n        // Emit the batch migration event\\n        emit BatchMigrated(\\n            _batchId,\\n            _totalAmount,\\n            _normalisedBalance,\\n            _nodeAddress,\\n            _owner,\\n            _depth,\\n            _bucketDepth,\\n            _immutable\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new batch and registers the payer\\n     * @param _owner Address that pays for the batch, but not the owner of the batch\\n     * @param _nodeAddress Address of the node that will own the batch\\n     * @param _initialBalancePerChunk Initial balance per chunk\\n     * @param _depth Depth of the batch\\n     * @param _bucketDepth Bucket depth\\n     * @param _nonce Unique nonce for the batch\\n     * @param _immutable Whether the batch is immutable\\n     */\\n    function createBatchRegistry(\\n        address _owner,\\n        address _nodeAddress,\\n        uint256 _initialBalancePerChunk,\\n        uint8 _depth,\\n        uint8 _bucketDepth,\\n        bytes32 _nonce,\\n        bool _immutable\\n    ) external {\\n        // Calculate total amount\\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\\n\\n        // Transfer BZZ tokens from sender to this contract\\n        if (!BZZ_TOKEN.transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        // Approve swarmStampContract to spend the BZZ tokens\\n        if (!BZZ_TOKEN.approve(address(swarmStampContract), totalAmount)) {\\n            revert ApprovalFailed();\\n        }\\n\\n        // Call the original swarm contract with nodeAddress as owner\\n        swarmStampContract.createBatch(\\n            _nodeAddress,\\n            _initialBalancePerChunk,\\n            _depth,\\n            _bucketDepth,\\n            _nonce,\\n            _immutable\\n        );\\n\\n        // Calculate batchId as bytes32\\n        bytes32 batchId = keccak256(abi.encode(address(this), _nonce));\\n\\n        // Store the payer information\\n        batchPayers[batchId] = _owner;\\n\\n        // Get normalized balance\\n        uint256 normalisedBalance = swarmStampContract\\n            .currentTotalOutPayment() + _initialBalancePerChunk;\\n            \\n        // Store batch information in the owner's batches array\\n        ownerBatches[_owner].push(BatchInfo({\\n            batchId: batchId,\\n            totalAmount: totalAmount,\\n            normalisedBalance: normalisedBalance,\\n            nodeAddress: _nodeAddress,\\n            payer: _owner,\\n            depth: _depth,\\n            bucketDepth: _bucketDepth,\\n            immutable_: _immutable,\\n            timestamp: block.timestamp\\n        }));\\n\\n        // Emit the batch creation event\\n        emit BatchCreated(\\n            batchId,\\n            totalAmount,\\n            normalisedBalance,\\n            _nodeAddress,\\n            _owner,\\n            _depth,\\n            _bucketDepth,\\n            _immutable\\n        );\\n    }\\n\\n    /**\\n     * @notice Top up an existing batch\\n     * @param _batchId The id of the batch to top up\\n     * @param _topupAmountPerChunk The amount of additional tokens to add per chunk\\n     */\\n    function topUpBatch(\\n        bytes32 _batchId,\\n        uint256 _topupAmountPerChunk\\n    ) external {\\n        // Find the batch info in owner's batches\\n        address owner = batchPayers[_batchId];\\n        require(owner != address(0), \\\"Batch does not exist in registry\\\");\\n        \\n        // Find the batch to get its depth for total amount calculation\\n        uint8 depth;\\n        uint256 currentNormalisedBalance;\\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\\n            if (ownerBatches[owner][i].batchId == _batchId) {\\n                depth = ownerBatches[owner][i].depth;\\n                currentNormalisedBalance = ownerBatches[owner][i].normalisedBalance;\\n                break;\\n            }\\n        }\\n        \\n        // Calculate total amount to be topped up\\n        uint256 totalAmount = _topupAmountPerChunk * (1 << depth);\\n        \\n        // Transfer BZZ tokens from sender to this contract\\n        if (!BZZ_TOKEN.transferFrom(msg.sender, address(this), totalAmount)) {\\n            revert TransferFailed();\\n        }\\n        \\n        // Approve swarmStampContract to spend the BZZ tokens\\n        if (!BZZ_TOKEN.approve(address(swarmStampContract), totalAmount)) {\\n            revert ApprovalFailed();\\n        }\\n        \\n        // Call the topUp function on the swarm contract\\n        swarmStampContract.topUp(_batchId, _topupAmountPerChunk);\\n        \\n        // Update the batch info in the registry\\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\\n            if (ownerBatches[owner][i].batchId == _batchId) {\\n                ownerBatches[owner][i].normalisedBalance = currentNormalisedBalance + _topupAmountPerChunk;\\n                break;\\n            }\\n        }\\n        \\n        // Emit the batch top up event\\n        emit BatchTopUp(\\n            _batchId,\\n            totalAmount,\\n            _topupAmountPerChunk,\\n            owner\\n        );\\n    }\\n\\n    /**\\n     * @notice Increase the depth of an existing batch\\n     * @param _batchId The id of the batch to increase depth\\n     * @param _newDepth The new depth for the batch (must be greater than current depth)\\n     */\\n    function increaseBatchDepth(bytes32 _batchId, uint8 _newDepth) external {\\n        // Find the batch info in owner's batches\\n        address owner = batchPayers[_batchId];\\n        require(owner != address(0), \\\"Batch does not exist in registry\\\");\\n        \\n        // Verify that msg.sender is the owner of the batch in the registry\\n        require(owner == msg.sender, \\\"Only the batch owner can increase depth\\\");\\n        \\n        // Find the batch to get its current depth and index\\n        uint8 currentDepth;\\n        uint256 batchIndex;\\n        bool foundBatch = false;\\n        \\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\\n            if (ownerBatches[owner][i].batchId == _batchId) {\\n                currentDepth = ownerBatches[owner][i].depth;\\n                batchIndex = i;\\n                foundBatch = true;\\n                break;\\n            }\\n        }\\n        \\n        require(foundBatch, \\\"Batch not found in owner's batches\\\");\\n        require(_newDepth > currentDepth, \\\"New depth must be greater than current depth\\\");\\n        \\n        // Call increaseDepth on the swarm contract\\n        swarmStampContract.increaseDepth(_batchId, _newDepth);\\n        \\n        // Get the updated values directly from the swarm contract\\n        uint8 updatedDepth = swarmStampContract.batchDepth(_batchId);\\n        uint256 newNormalisedBalance = swarmStampContract.batchNormalisedBalance(_batchId);\\n        \\n        // Update the batch in registry with values from the swarm contract\\n        ownerBatches[owner][batchIndex].depth = updatedDepth;\\n        ownerBatches[owner][batchIndex].normalisedBalance = newNormalisedBalance;\\n        \\n        // Emit batch depth increase event\\n        emit BatchDepthIncrease(\\n            _batchId,\\n            updatedDepth,\\n            newNormalisedBalance,\\n            owner\\n        );\\n    }\\n\\n    ////////////////////////////////////////\\n    //              GETTERS               //\\n    ////////////////////////////////////////\\n\\n    /**\\n     * @notice Get the payer address for a specific batch ID\\n     * @param _batchId The ID of the batch\\n     * @return The address of the payer\\n     */\\n    function getBatchPayer(bytes32 _batchId) external view returns (address) {\\n        return batchPayers[_batchId];\\n    }\\n    \\n    /**\\n     * @notice Get all batches for a specific owner\\n     * @param _owner The address of the owner\\n     * @return Array of BatchInfo for the owner\\n     */\\n    function getOwnerBatches(address _owner) external view returns (BatchInfo[] memory) {\\n        return ownerBatches[_owner];\\n    }\\n    \\n    /**\\n     * @notice Get the number of batches for a specific owner\\n     * @param _owner The address of the owner\\n     * @return The number of batches\\n     */\\n    function getOwnerBatchCount(address _owner) external view returns (uint256) {\\n        return ownerBatches[_owner].length;\\n    }\\n}\\n\",\"keccak256\":\"0x356301465c494b89d047649a319304e7559c5f5ba5f3bc3f273a80460d8ee918\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007c57601f6114d438819003918201601f19168301916001600160401b038311848410176100815780849260209460405283398101031261007c57516001600160a01b0381169081900361007c5760018060a01b0319908160005416176000553390600254161760025560405161143c90816100988239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c80631549361914610e9b5780632ff190d614610aa7578063302fb0ca14610a6e57806335f7447b146102c05780635e9b3ac1146109b8578063664031af1461060857806368a26f9f1461049057806375829def146103aa5780638831349414610383578063ae268816146102f3578063b0099620146102c0578063e1e1edfc14610291578063f851a440146102685763fa031f84146100b757600080fd5b346102655760209081600319360112610265576001600160a01b0391826100dc61118d565b16825260038082526040832091825467ffffffffffffffff811161025157604051919492600561011083821b88018561127a565b82845286840191829686528786209186935b8585106101cb575050505050506040519380850191818652518092526040850193925b8281106101525785850386f35b83518051865280830151868401526040808201519087015260608082015189169087015260808082015189169087015260a08082015160ff9081169188019190915260c0808301519091169087015260e08082015115159087015261010090810151908601526101209094019392810192600101610145565b60068a6001928d60409d9a9b9d51906101e38261125d565b8854825285890154848301526002890154604083015280888a01541660608301526004890154908116608083015260ff9060a08282821c1690840152818160a81c1660c084015260b01c16151560e08201528588015461010082015281520194019401939298969598610122565b634e487b7160e01b85526041600452602485fd5b80fd5b50346102655780600319360112610265576002546040516001600160a01b039091168152602090f35b5034610265578060031936011261026557602060405173dbf3ea6f5bee45c02255b2c26a16f300502f68da8152f35b503461026557602036600319011261026557602090600435815260018252604060018060a01b0391205416604051908152f35b5034610265576020366003190112610265577f470ea4ad511ce9155b66f263468d8b2d8bb80ddc9d3fe333d69feea9b7bb496f61032e61118d565b6002546001600160a01b03919061034890831633146113b0565b83548183166001600160a01b0319821617855560408051939091166001600160a01b0390811684529091166020830152819081015b0390a180f35b5034610265578060031936011261026557546040516001600160a01b039091168152602090f35b5034610265576020366003190112610265576103c461118d565b600254906001600160a01b03808316906103df3383146113b0565b8216801561043f576001600160a01b031993909316909217600255604080516001600160a01b0393841681529190921660208201527ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6918190810161037d565b60405162461bcd60e51b8152602060048201526024808201527f4e65772061646d696e2063616e6e6f7420626520746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b503461026557610120366003190112610265576104ab61118d565b608435906001600160a01b0380831683036106035760ff60a4351660a435036106035760ff60c4351660c435036106035760e435151560e43503610603576104f8816002541633146113b0565b60243584526001602052604084208183166bffffffffffffffffffffffff60a01b82541617905580821684526003602052610591604085206040519061053d8261125d565b6024358252604435602083015260643560408301528386166060830152838516608083015260ff60a4351660a083015260ff60c4351660c083015260e435151560e0830152610104356101008301526112c1565b8060405192169216907f048eb855e673d9441d2d3305af4e1feaf7c2e0805c372d702d88de09af80e1cb60243591806105fd60e43560c43560a435606435604435869360ff608094819398979460a0880199885260208801521660408601521660608401521515910152565b0390a480f35b600080fd5b503461026557604036600319011261026557600435602490813560ff9260ff8216809203610603578285526001906020926001845260018060a01b039081604089205416966106588815156111d5565b3388036109645793888091819681898b8d8680945b6108f7575b50505050505050156108a85760ff1681111561084f5787908282541690813b1561084b5782916044839260405194859384926347aab79b60e01b84528d60048501528a8401525af1801561082857610833575b505416918660405163225f574760e11b815286600482015285818581885afa94851561082857869183966107e9575b506040519485809263df67438560e01b82528a60048301525afa9283156107dc57879082946107a6575b5092600261079484610785886004610766879960408a7ffdee0eecf77a3806c3c4424dcaa7d9c3ed2bed243cbcbe9f88696cb6639985c89f9b9d829f9e5260038c52206111a3565b5001805460ff60a01b191660a09290921b60ff60a01b16919091179055565b8a8c5260038552878c206111a3565b50015560ff845193168352820152a380f35b94935050508383813d83116107d5575b6107c0818361127a565b8101031261060357915190918686600261071e565b503d6107b6565b50604051903d90823e3d90fd5b8281939297503d8311610821575b610801818361127a565b8101031261081d575160ff8116810361081d57859094386106f4565b5080fd5b503d6107f7565b6040513d84823e3d90fd5b61083c90611249565b6108475786386106c5565b8680fd5b8280fd5b60405162461bcd60e51b815260048101869052602c818501527f4e6577206465707468206d7573742062652067726561746572207468616e206360448201526b0eae4e4cadce840c8cae0e8d60a31b6064820152608490fd5b60405162461bcd60e51b8152600481018790526022818601527f4261746368206e6f7420666f756e6420696e206f776e65722773206261746368604482015261657360f01b6064820152608490fd5b604091815260038094522080548410156109595783610915916111a3565b50541461092957508201898b8d8f8661066d565b92985093509150898b52875260046109448360408d206111a3565b50015460a01c169094388080898b8d8f610672565b508b91508d8f610672565b60405162461bcd60e51b8152600481018790526027818601527f4f6e6c7920746865206261746368206f776e65722063616e20696e63726561736044820152660ca40c8cae0e8d60cb1b6064820152608490fd5b5034610265576040366003190112610265576109d261118d565b6001600160a01b03908116825260036020526040822080546024359390841015610265575061012092610a04916111a3565b509060ff82549260018101549260028201548160038401541690600560048501549401549560405197885260208801526040870152606086015281166080850152818160a01c1660a0850152818160a81c1660c085015260b01c16151560e0830152610100820152f35b5034610265576020366003190112610265576020906040906001600160a01b03610a9661118d565b168152600383522054604051908152f35b50346102655760e036600319011261026557610ac161118d565b602435906001600160a01b03821682036106035760ff60643516606435036106035760ff60843516608435036106035760c435151560c4350361060357610b12600160ff606435161b604435611220565b6040516323b872dd60e01b81523360048201523060248201526044810182905273dbf3ea6f5bee45c02255b2c26a16f300502f68da9060208160648189865af1908115610de5578691610e7c575b5015610e6a57845460405163095ea7b360e01b81526001600160a01b03909116600482015260248101839052906020908290604490829089905af1908115610e5f578591610e30575b5015610e1e57835484906001600160a01b0316803b1561081d5781809160c460405180948193635239af7160e01b835260018060a01b038b166004840152604435602484015260ff60643516604484015260ff60843516606484015260a43560848401528335151560a48401525af1801561082857610e06575b505060405130602082015260a43560408201526040815280606081011067ffffffffffffffff606083011117610df05760608101604090815281516020928301208087526001835281872080546001600160a01b0319166001600160a01b03878116919091179091558754925163051b17cd60e41b815291949193919284916004918391165afa918215610de5578692610daf575b50610ce77fc56374a8e3361770343efe343883bf87efaeca24024afbba9062b88495f50f6e92604435906112b4565b6001600160a01b0385168752600360205260408088209051919591610d6291610d0f8261125d565b86825260208201859052604082018890526001600160a01b0389811660608401528416608083015260ff606435811660a08401526084351660c083015260c435151560e0830152426101008301526112c1565b60408051928352602083019590955260ff60643581169583019590955260843594909416606082015260c435151560808201526001600160a01b0393841694909316928060a081016105fd565b91506020823d602011610ddd575b81610dca6020938361127a565b8101031261060357905190610ce7610cb8565b3d9150610dbd565b6040513d88823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b610e0f90611249565b610e1a578338610c23565b8380fd5b6040516340b27c2160e11b8152600490fd5b610e52915060203d602011610e58575b610e4a818361127a565b81019061129c565b38610ba9565b503d610e40565b6040513d87823e3d90fd5b6040516312171d8360e31b8152600490fd5b610e95915060203d602011610e5857610e4a818361127a565b38610b60565b5034610265576040366003190112610265576004358082526001602081815260408420546001600160a01b039081169392909160243591610edd8615156111d5565b86808281815b611109575b5060ff610ef792161b85611220565b6040516323b872dd60e01b81523360048201523060248201526044810182905290959073dbf3ea6f5bee45c02255b2c26a16f300502f68da9085816064818e865af19081156110fe578b916110e1575b5015610e6a57895460405163095ea7b360e01b81529083166001600160a01b03166004820152602481018890529085908290818d816044810103925af19081156110d6578a916110b9575b5015610e1e578890815416803b1561081d57819060446040518094819363b67644b960e01b83528c60048401528a60248401525af180156110ae5761109b575b5087825b611010575b505050916040917fc5391d63190b7934cf128defb45873bc47a98ed41a70554734dae20fa16464f4938351928352820152a380f35b87895260038085528760408b2080548410156110935783611030916111a3565b5054146110405750820182610fd6565b908593506110876002916110796040987fc5391d63190b7934cf128defb45873bc47a98ed41a70554734dae20fa16464f49a98966112b4565b938b8d528552878c206111a3565b50015591938193610fdb565b505050610fdb565b976110a7839299611249565b9790610fd2565b6040513d8b823e3d90fd5b6110d09150853d8711610e5857610e4a818361127a565b38610f92565b6040513d8c823e3d90fd5b6110f89150863d8811610e5857610e4a818361127a565b38610f47565b6040513d8d823e3d90fd5b898b52898b60038089528b604083208054861015611183578561112b916111a3565b50541461113d57505050810181610ee3565b829650610ef795509260408260ff956002956111789552808c52866004611166868686206111a3565b50015460a01c169982528b52206111a3565b500154939250610ee8565b5050505050610ee8565b600435906001600160a01b038216820361060357565b80548210156111bf576000526006602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b156111dc57565b606460405162461bcd60e51b815260206004820152602060248201527f426174636820646f6573206e6f7420657869737420696e2072656769737472796044820152fd5b8181029291811591840414171561123357565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8111610df057604052565b610120810190811067ffffffffffffffff821117610df057604052565b90601f8019910116810190811067ffffffffffffffff821117610df057604052565b90816020910312610603575180151581036106035790565b9190820180921161123357565b805468010000000000000000811015610df0576112e3916001820181556111a3565b91909161139a5780518255602081015160018301556040810151600283015560608101516003830180546001600160a01b0319166001600160a01b03928316179055608082015160048401805460a0808601516001600160a81b031990921693909416929092179190921b60ff60a01b161781556005916101009160c0820151815460e084015161ffff60a81b1990911660a89290921b60ff60a81b169190911790151560b01b60ff60b01b161790550151910155565b634e487b7160e01b600052600060045260246000fd5b156113b757565b60405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608490fdfea2646970667358221220063f72a24bb2047e60a1b3cc966c5b0e95f7435bcaf11ebc7e7a750e8791e5cb64736f6c63430008170033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)": {
        "params": {
          "_bucketDepth": "Bucket depth",
          "_depth": "Depth of the batch",
          "_immutable": "Whether the batch is immutable",
          "_initialBalancePerChunk": "Initial balance per chunk",
          "_nodeAddress": "Address of the node that will own the batch",
          "_nonce": "Unique nonce for the batch",
          "_owner": "Address that pays for the batch, but not the owner of the batch"
        }
      },
      "getBatchPayer(bytes32)": {
        "params": {
          "_batchId": "The ID of the batch"
        },
        "returns": {
          "_0": "The address of the payer"
        }
      },
      "getOwnerBatchCount(address)": {
        "params": {
          "_owner": "The address of the owner"
        },
        "returns": {
          "_0": "The number of batches"
        }
      },
      "getOwnerBatches(address)": {
        "params": {
          "_owner": "The address of the owner"
        },
        "returns": {
          "_0": "Array of BatchInfo for the owner"
        }
      },
      "increaseBatchDepth(bytes32,uint8)": {
        "params": {
          "_batchId": "The id of the batch to increase depth",
          "_newDepth": "The new depth for the batch (must be greater than current depth)"
        }
      },
      "migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)": {
        "params": {
          "_batchId": "Batch ID from the old contract",
          "_bucketDepth": "Bucket depth from the old batch",
          "_depth": "Depth from the old batch",
          "_immutable": "Immutable flag from the old batch",
          "_nodeAddress": "Node address from the old batch",
          "_normalisedBalance": "Normalised balance from the old batch",
          "_owner": "Address that owns the batch",
          "_timestamp": "Original timestamp from the old batch",
          "_totalAmount": "Total amount from the old batch"
        }
      },
      "topUpBatch(bytes32,uint256)": {
        "params": {
          "_batchId": "The id of the batch to top up",
          "_topupAmountPerChunk": "The amount of additional tokens to add per chunk"
        }
      },
      "transferAdmin(address)": {
        "params": {
          "_newAdmin": "The address of the new admin"
        }
      },
      "updateSwarmContract(address)": {
        "params": {
          "_newSwarmContractAddress": "New address of the swarm contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createBatchRegistry(address,address,uint256,uint8,uint8,bytes32,bool)": {
        "notice": "Creates a new batch and registers the payer"
      },
      "getBatchPayer(bytes32)": {
        "notice": "Get the payer address for a specific batch ID"
      },
      "getOwnerBatchCount(address)": {
        "notice": "Get the number of batches for a specific owner"
      },
      "getOwnerBatches(address)": {
        "notice": "Get all batches for a specific owner"
      },
      "increaseBatchDepth(bytes32,uint8)": {
        "notice": "Increase the depth of an existing batch"
      },
      "migrateBatchRegistry(address,bytes32,uint256,uint256,address,uint8,uint8,bool,uint256)": {
        "notice": "Migrate batch data from old contract without performing token transfers"
      },
      "topUpBatch(bytes32,uint256)": {
        "notice": "Top up an existing batch"
      },
      "transferAdmin(address)": {
        "notice": "Transfer admin rights to a new address"
      },
      "updateSwarmContract(address)": {
        "notice": "Updates the swarm contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1001,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "swarmStampContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISwarmContract)977"
      },
      {
        "astId": 1011,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "batchPayers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1013,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "admin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1038,
        "contract": "contracts/StampsRegistry.sol:StampsRegistry",
        "label": "ownerBatches",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(BatchInfo)1032_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BatchInfo)1032_storage)dyn_storage": {
        "base": "t_struct(BatchInfo)1032_storage",
        "encoding": "dynamic_array",
        "label": "struct StampsRegistry.BatchInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISwarmContract)977": {
        "encoding": "inplace",
        "label": "contract ISwarmContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(BatchInfo)1032_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StampsRegistry.BatchInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(BatchInfo)1032_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(BatchInfo)1032_storage": {
        "encoding": "inplace",
        "label": "struct StampsRegistry.BatchInfo",
        "members": [
          {
            "astId": 1015,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "batchId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1017,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1019,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "normalisedBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1021,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1023,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "payer",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1025,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "depth",
            "offset": 20,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1027,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "bucketDepth",
            "offset": 21,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 1029,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "immutable_",
            "offset": 22,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1031,
            "contract": "contracts/StampsRegistry.sol:StampsRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}