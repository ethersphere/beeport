{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/StampsRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\n/*\n    ███████╗████████╗ █████╗ ███╗   ███╗██████╗ ███████╗\n    ██╔════╝╚══██╔══╝██╔══██╗████╗ ████║██╔══██╗██╔════╝\n    ███████╗   ██║   ███████║██╔████╔██║██████╔╝███████╗\n    ╚════██║   ██║   ██╔══██║██║╚██╔╝██║██╔═══╝ ╚════██║\n    ███████║   ██║   ██║  ██║██║ ╚═╝ ██║██║     ███████║\n    ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝     ╚═╝╚═╝     ╚══════╝\n                                              \n    ██████╗ ███████╗ ██████╗ ██╗███████╗████████╗██████╗ ██╗   ██╗\n    ██╔══██╗██╔════╝██╔════╝ ██║██╔════╝╚══██╔══╝██╔══██╗╚██╗ ██╔╝\n    ██████╔╝█████╗  ██║  ███╗██║███████╗   ██║   ██████╔╝ ╚████╔╝ \n    ██╔══██╗██╔══╝  ██║   ██║██║╚════██║   ██║   ██╔══██╗  ╚██╔╝  \n    ██║  ██║███████╗╚██████╔╝██║███████║   ██║   ██║  ██║   ██║   \n    ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝   \n*/\n\n/**\n * @title StampsRegistry\n * @notice A registry for Swarm Postage Stamps\n * @dev Note on naming convention: The terms \"Batch\" and \"Stamps\" are used interchangeably throughout the codebase.\n *      \"Batch\" refers to a collection of stamps created in a single transaction and is the terminology used in the\n *      Swarm protocol. \"Stamps\" is a more user-friendly term used to describe the same concept.\n *      For example: \"BatchCreated\" event, but \"StampsRegistry\" contract.\n */\n\ninterface ISwarmContract {\n    function createBatch(\n        address _owner,\n        uint256 _initialBalancePerChunk,\n        uint8 _depth,\n        uint8 _bucketDepth,\n        bytes32 _nonce,\n        bool _immutable\n    ) external;\n\n    function topUp(bytes32 _batchId, uint256 _topupAmountPerChunk) external;\n    \n    function increaseDepth(bytes32 _batchId, uint8 _newDepth) external;\n\n    function currentTotalOutPayment() external view returns (uint256);\n    \n    function remainingBalance(bytes32 _batchId) external view returns (uint256);\n    \n    function batchOwner(bytes32 _batchId) external view returns (address);\n    \n    function batchDepth(bytes32 _batchId) external view returns (uint8);\n    \n    function batchBucketDepth(bytes32 _batchId) external view returns (uint8);\n    \n    function batchImmutableFlag(bytes32 _batchId) external view returns (bool);\n    \n    function batchNormalisedBalance(bytes32 _batchId) external view returns (uint256);\n    \n    function batchLastUpdatedBlockNumber(bytes32 _batchId) external view returns (uint256);\n}\n\ninterface IERC20 {\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\ncontract StampsRegistry {\n    // State variables\n    ISwarmContract public swarmStampContract;\n    IERC20 public constant BZZ_TOKEN =\n        IERC20(0xdBF3Ea6F5beE45c02255B2c26a16F300502F68da);\n    mapping(bytes32 => address) public batchPayers;\n    address public admin;\n    \n    // New data structure to store batch information by owner\n    struct BatchInfo {\n        bytes32 batchId;\n        uint256 totalAmount;\n        uint256 normalisedBalance;\n        address nodeAddress;\n        address payer;\n        uint8 depth;\n        uint8 bucketDepth;\n        bool immutable_;\n        uint256 timestamp;\n    }\n    \n    // Mapping from owner address to array of BatchInfo\n    mapping(address => BatchInfo[]) public ownerBatches;\n    \n    // Events\n    event BatchCreated(\n        bytes32 indexed batchId,\n        uint256 totalAmount,\n        uint256 normalisedBalance,\n        address indexed owner,\n        address indexed payer,\n        uint8 depth,\n        uint8 bucketDepth,\n        bool immutable_\n    );\n\n    event BatchTopUp(\n        bytes32 indexed batchId,\n        uint256 totalAmount,\n        uint256 topupAmountPerChunk,\n        address indexed owner\n    );\n\n    event BatchDepthIncrease(\n        bytes32 indexed batchId,\n        uint8 newDepth,\n        uint256 newNormalisedBalance,\n        address indexed owner\n    );\n\n    event BatchMigrated(\n        bytes32 indexed batchId,\n        uint256 totalAmount,\n        uint256 normalisedBalance,\n        address indexed owner,\n        address indexed payer,\n        uint8 depth,\n        uint8 bucketDepth,\n        bool immutable_\n    );\n    event SwarmContractUpdated(address oldAddress, address newAddress);\n    event AdminTransferred(address oldAdmin, address newAdmin);\n\n    // Custom errors\n    error TransferFailed();\n    error ApprovalFailed();\n\n    // Modifiers\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can call this function\");\n        _;\n    }\n\n    constructor(address _swarmContractAddress) {\n        swarmStampContract = ISwarmContract(_swarmContractAddress);\n        admin = msg.sender;\n    }\n\n    ////////////////////////////////////////\n    //              SETTERS               //\n    ////////////////////////////////////////\n\n    /**\n     * @notice Transfer admin rights to a new address\n     * @param _newAdmin The address of the new admin\n     */\n    function transferAdmin(address _newAdmin) external onlyAdmin {\n        require(_newAdmin != address(0), \"New admin cannot be the zero address\");\n        address oldAdmin = admin;\n        admin = _newAdmin;\n        emit AdminTransferred(oldAdmin, _newAdmin);\n    }\n\n    /**\n     * @notice Updates the swarm contract address\n     * @param _newSwarmContractAddress New address of the swarm contract\n     */\n    function updateSwarmContract(\n        address _newSwarmContractAddress\n    ) external onlyAdmin {\n        address oldAddress = address(swarmStampContract);\n        swarmStampContract = ISwarmContract(_newSwarmContractAddress);\n        emit SwarmContractUpdated(oldAddress, _newSwarmContractAddress);\n    }\n\n    /**\n     * @notice Migrate batch data from old contract without performing token transfers\n     * @param _owner Address that owns the batch\n     * @param _batchId Batch ID from the old contract\n     * @param _totalAmount Total amount from the old batch\n     * @param _normalisedBalance Normalised balance from the old batch\n     * @param _nodeAddress Node address from the old batch\n     * @param _depth Depth from the old batch\n     * @param _bucketDepth Bucket depth from the old batch\n     * @param _immutable Immutable flag from the old batch\n     * @param _timestamp Original timestamp from the old batch\n     */\n    function migrateBatchRegistry(\n        address _owner,\n        bytes32 _batchId,\n        uint256 _totalAmount,\n        uint256 _normalisedBalance,\n        address _nodeAddress,\n        uint8 _depth,\n        uint8 _bucketDepth,\n        bool _immutable,\n        uint256 _timestamp\n    ) external onlyAdmin {\n        // Store the payer information\n        batchPayers[_batchId] = _owner;\n            \n        // Store batch information in the owner's batches array\n        ownerBatches[_owner].push(BatchInfo({\n            batchId: _batchId,\n            totalAmount: _totalAmount,\n            normalisedBalance: _normalisedBalance,\n            nodeAddress: _nodeAddress,\n            payer: _owner,\n            depth: _depth,\n            bucketDepth: _bucketDepth,\n            immutable_: _immutable,\n            timestamp: _timestamp\n        }));\n\n        // Emit the batch migration event\n        emit BatchMigrated(\n            _batchId,\n            _totalAmount,\n            _normalisedBalance,\n            _nodeAddress,\n            _owner,\n            _depth,\n            _bucketDepth,\n            _immutable\n        );\n    }\n\n    /**\n     * @notice Creates a new batch and registers the payer\n     * @param _owner Address that pays for the batch, but not the owner of the batch\n     * @param _nodeAddress Address of the node that will own the batch\n     * @param _initialBalancePerChunk Initial balance per chunk\n     * @param _depth Depth of the batch\n     * @param _bucketDepth Bucket depth\n     * @param _nonce Unique nonce for the batch\n     * @param _immutable Whether the batch is immutable\n     */\n    function createBatchRegistry(\n        address _owner,\n        address _nodeAddress,\n        uint256 _initialBalancePerChunk,\n        uint8 _depth,\n        uint8 _bucketDepth,\n        bytes32 _nonce,\n        bool _immutable\n    ) external {\n        // Calculate total amount\n        uint256 totalAmount = _initialBalancePerChunk * (1 << _depth);\n\n        // Transfer BZZ tokens from sender to this contract\n        if (!BZZ_TOKEN.transferFrom(msg.sender, address(this), totalAmount)) {\n            revert TransferFailed();\n        }\n\n        // Approve swarmStampContract to spend the BZZ tokens\n        if (!BZZ_TOKEN.approve(address(swarmStampContract), totalAmount)) {\n            revert ApprovalFailed();\n        }\n\n        // Call the original swarm contract with nodeAddress as owner\n        swarmStampContract.createBatch(\n            _nodeAddress,\n            _initialBalancePerChunk,\n            _depth,\n            _bucketDepth,\n            _nonce,\n            _immutable\n        );\n\n        // Calculate batchId as bytes32\n        bytes32 batchId = keccak256(abi.encode(address(this), _nonce));\n\n        // Store the payer information\n        batchPayers[batchId] = _owner;\n\n        // Get normalized balance\n        uint256 normalisedBalance = swarmStampContract\n            .currentTotalOutPayment() + _initialBalancePerChunk;\n            \n        // Store batch information in the owner's batches array\n        ownerBatches[_owner].push(BatchInfo({\n            batchId: batchId,\n            totalAmount: totalAmount,\n            normalisedBalance: normalisedBalance,\n            nodeAddress: _nodeAddress,\n            payer: _owner,\n            depth: _depth,\n            bucketDepth: _bucketDepth,\n            immutable_: _immutable,\n            timestamp: block.timestamp\n        }));\n\n        // Emit the batch creation event\n        emit BatchCreated(\n            batchId,\n            totalAmount,\n            normalisedBalance,\n            _nodeAddress,\n            _owner,\n            _depth,\n            _bucketDepth,\n            _immutable\n        );\n    }\n\n    /**\n     * @notice Top up an existing batch\n     * @param _batchId The id of the batch to top up\n     * @param _topupAmountPerChunk The amount of additional tokens to add per chunk\n     */\n    function topUpBatch(\n        bytes32 _batchId,\n        uint256 _topupAmountPerChunk\n    ) external {\n        // Find the batch info in owner's batches\n        address owner = batchPayers[_batchId];\n        require(owner != address(0), \"Batch does not exist in registry\");\n        \n        // Find the batch to get its depth for total amount calculation\n        uint8 depth;\n        uint256 currentNormalisedBalance;\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\n            if (ownerBatches[owner][i].batchId == _batchId) {\n                depth = ownerBatches[owner][i].depth;\n                currentNormalisedBalance = ownerBatches[owner][i].normalisedBalance;\n                break;\n            }\n        }\n        \n        // Calculate total amount to be topped up\n        uint256 totalAmount = _topupAmountPerChunk * (1 << depth);\n        \n        // Transfer BZZ tokens from sender to this contract\n        if (!BZZ_TOKEN.transferFrom(msg.sender, address(this), totalAmount)) {\n            revert TransferFailed();\n        }\n        \n        // Approve swarmStampContract to spend the BZZ tokens\n        if (!BZZ_TOKEN.approve(address(swarmStampContract), totalAmount)) {\n            revert ApprovalFailed();\n        }\n        \n        // Call the topUp function on the swarm contract\n        swarmStampContract.topUp(_batchId, _topupAmountPerChunk);\n        \n        // Update the batch info in the registry\n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\n            if (ownerBatches[owner][i].batchId == _batchId) {\n                ownerBatches[owner][i].normalisedBalance = currentNormalisedBalance + _topupAmountPerChunk;\n                break;\n            }\n        }\n        \n        // Emit the batch top up event\n        emit BatchTopUp(\n            _batchId,\n            totalAmount,\n            _topupAmountPerChunk,\n            owner\n        );\n    }\n\n    /**\n     * @notice Increase the depth of an existing batch\n     * @param _batchId The id of the batch to increase depth\n     * @param _newDepth The new depth for the batch (must be greater than current depth)\n     */\n    function increaseBatchDepth(bytes32 _batchId, uint8 _newDepth) external {\n        // Find the batch info in owner's batches\n        address owner = batchPayers[_batchId];\n        require(owner != address(0), \"Batch does not exist in registry\");\n        \n        // Verify that msg.sender is the owner of the batch in the registry\n        require(owner == msg.sender, \"Only the batch owner can increase depth\");\n        \n        // Find the batch to get its current depth and index\n        uint8 currentDepth;\n        uint256 batchIndex;\n        bool foundBatch = false;\n        \n        for (uint i = 0; i < ownerBatches[owner].length; i++) {\n            if (ownerBatches[owner][i].batchId == _batchId) {\n                currentDepth = ownerBatches[owner][i].depth;\n                batchIndex = i;\n                foundBatch = true;\n                break;\n            }\n        }\n        \n        require(foundBatch, \"Batch not found in owner's batches\");\n        require(_newDepth > currentDepth, \"New depth must be greater than current depth\");\n        \n        // Call increaseDepth on the swarm contract\n        swarmStampContract.increaseDepth(_batchId, _newDepth);\n        \n        // Get the updated values directly from the swarm contract\n        uint8 updatedDepth = swarmStampContract.batchDepth(_batchId);\n        uint256 newNormalisedBalance = swarmStampContract.batchNormalisedBalance(_batchId);\n        \n        // Update the batch in registry with values from the swarm contract\n        ownerBatches[owner][batchIndex].depth = updatedDepth;\n        ownerBatches[owner][batchIndex].normalisedBalance = newNormalisedBalance;\n        \n        // Emit batch depth increase event\n        emit BatchDepthIncrease(\n            _batchId,\n            updatedDepth,\n            newNormalisedBalance,\n            owner\n        );\n    }\n\n    ////////////////////////////////////////\n    //              GETTERS               //\n    ////////////////////////////////////////\n\n    /**\n     * @notice Get the payer address for a specific batch ID\n     * @param _batchId The ID of the batch\n     * @return The address of the payer\n     */\n    function getBatchPayer(bytes32 _batchId) external view returns (address) {\n        return batchPayers[_batchId];\n    }\n    \n    /**\n     * @notice Get all batches for a specific owner\n     * @param _owner The address of the owner\n     * @return Array of BatchInfo for the owner\n     */\n    function getOwnerBatches(address _owner) external view returns (BatchInfo[] memory) {\n        return ownerBatches[_owner];\n    }\n    \n    /**\n     * @notice Get the number of batches for a specific owner\n     * @param _owner The address of the owner\n     * @return The number of batches\n     */\n    function getOwnerBatchCount(address _owner) external view returns (uint256) {\n        return ownerBatches[_owner].length;\n    }\n}\n"
    },
    "contracts/SwarmBatchRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ninterface ISushiSwapV2Router {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    \n    function getAmountsOut(uint amountIn, address[] calldata path)\n        external view returns (uint[] memory amounts);\n}\n\ninterface IBatchRegistry {\n    function createBatchRegistry(\n        address owner,\n        address nodeAddress,\n        uint256 initialPaymentPerChunk,\n        uint8 depth,\n        uint8 bucketDepth,\n        bytes32 nonce,\n        bool immutableFlag\n    ) external;\n    \n    function topUpBatch(bytes32 batchId, uint256 topupAmountPerChunk) external;\n}\n\ncontract SwarmBatchSwapper is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    \n    // Default addresses on Gnosis Chain\n    ISushiSwapV2Router public sushiRouter;\n    IBatchRegistry public batchRegistry;\n    address public bzzToken;\n    address public defaultInputToken; // USDC by default\n    address public defaultPool;\n    \n    // Events\n    event SwapAndCreateBatch(\n        address indexed user,\n        address inputToken,\n        uint256 inputAmount,\n        uint256 bzzReceived,\n        uint256 bzzUsed,\n        uint256 bzzReturned,\n        bytes32 indexed batchId\n    );\n    \n    event SwapAndTopUpBatch(\n        address indexed user,\n        address inputToken,\n        uint256 inputAmount,\n        uint256 bzzReceived,\n        uint256 bzzUsed,\n        uint256 bzzReturned,\n        bytes32 indexed batchId\n    );\n    \n    event ConfigUpdated(\n        address sushiRouter,\n        address batchRegistry,\n        address bzzToken,\n        address defaultInputToken,\n        address defaultPool\n    );\n    \n    constructor(\n        address _sushiRouter,\n        address _batchRegistry,\n        address _bzzToken,\n        address _defaultInputToken,\n        address _defaultPool\n    ) Ownable(msg.sender) {\n        sushiRouter = ISushiSwapV2Router(_sushiRouter);\n        batchRegistry = IBatchRegistry(_batchRegistry);\n        bzzToken = _bzzToken;\n        defaultInputToken = _defaultInputToken;\n        defaultPool = _defaultPool;\n    }\n    \n    /**\n     * @dev Swap input token to BZZ and create new batch\n     */\n    function swapAndCreateBatch(\n        address inputToken,\n        uint256 inputAmount,\n        uint256 exactBzzNeeded,\n        uint256 minBzzReceived,\n        address owner,\n        address nodeAddress,\n        uint256 initialPaymentPerChunk,\n        uint8 depth,\n        uint8 bucketDepth,\n        bytes32 nonce,\n        bool immutableFlag\n    ) external nonReentrant {\n        require(inputAmount > 0, \"Input amount must be greater than 0\");\n        require(exactBzzNeeded > 0, \"BZZ needed must be greater than 0\");\n        \n        // Transfer input tokens from user\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\n        \n        // Perform swap\n        uint256 bzzReceived = _performSwap(inputToken, inputAmount, minBzzReceived);\n        require(bzzReceived >= exactBzzNeeded, \"Insufficient BZZ received from swap\");\n        \n        // Approve BZZ for batch registry\n        IERC20(bzzToken).forceApprove(address(batchRegistry), exactBzzNeeded);\n        \n        // Create batch\n        batchRegistry.createBatchRegistry(\n            owner,\n            nodeAddress,\n            initialPaymentPerChunk,\n            depth,\n            bucketDepth,\n            nonce,\n            immutableFlag\n        );\n        \n        // Return excess BZZ to user\n        uint256 excessBzz = bzzReceived - exactBzzNeeded;\n        if (excessBzz > 0) {\n            IERC20(bzzToken).safeTransfer(msg.sender, excessBzz);\n        }\n        \n        // Calculate batch ID (same logic as frontend)\n        bytes32 batchId = keccak256(abi.encodePacked(nonce, address(batchRegistry)));\n        \n        emit SwapAndCreateBatch(\n            msg.sender,\n            inputToken,\n            inputAmount,\n            bzzReceived,\n            exactBzzNeeded,\n            excessBzz,\n            batchId\n        );\n    }\n    \n    /**\n     * @dev Swap input token to BZZ and top up existing batch\n     */\n    function swapAndTopUpBatch(\n        address inputToken,\n        uint256 inputAmount,\n        uint256 exactBzzNeeded,\n        uint256 minBzzReceived,\n        bytes32 batchId,\n        uint256 topupAmountPerChunk\n    ) external nonReentrant {\n        require(inputAmount > 0, \"Input amount must be greater than 0\");\n        require(exactBzzNeeded > 0, \"BZZ needed must be greater than 0\");\n        require(batchId != bytes32(0), \"Invalid batch ID\");\n        \n        // Transfer input tokens from user\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\n        \n        // Perform swap\n        uint256 bzzReceived = _performSwap(inputToken, inputAmount, minBzzReceived);\n        require(bzzReceived >= exactBzzNeeded, \"Insufficient BZZ received from swap\");\n        \n        // Approve BZZ for batch registry\n        IERC20(bzzToken).forceApprove(address(batchRegistry), exactBzzNeeded);\n        \n        // Top up batch\n        batchRegistry.topUpBatch(batchId, topupAmountPerChunk);\n        \n        // Return excess BZZ to user\n        uint256 excessBzz = bzzReceived - exactBzzNeeded;\n        if (excessBzz > 0) {\n            IERC20(bzzToken).safeTransfer(msg.sender, excessBzz);\n        }\n        \n        emit SwapAndTopUpBatch(\n            msg.sender,\n            inputToken,\n            inputAmount,\n            bzzReceived,\n            exactBzzNeeded,\n            excessBzz,\n            batchId\n        );\n    }\n    \n    /**\n     * @dev Get expected BZZ output for input amount\n     */\n    function getExpectedBzzOutput(address inputToken, uint256 inputAmount) \n        external view returns (uint256 expectedBzz) {\n        if (inputToken == bzzToken) {\n            return inputAmount;\n        }\n        \n        address[] memory path = _getSwapPath(inputToken);\n        uint[] memory amounts = sushiRouter.getAmountsOut(inputAmount, path);\n        return amounts[amounts.length - 1];\n    }\n    \n    /**\n     * @dev Internal function to perform token swap\n     */\n    function _performSwap(\n        address inputToken, \n        uint256 inputAmount, \n        uint256 minBzzReceived\n    ) internal returns (uint256 bzzReceived) {\n        // If input token is already BZZ, no swap needed\n        if (inputToken == bzzToken) {\n            return inputAmount;\n        }\n        \n        address[] memory path = _getSwapPath(inputToken);\n        \n        // Approve SushiSwap router\n        IERC20(inputToken).forceApprove(address(sushiRouter), inputAmount);\n        \n        // Perform swap\n        uint[] memory amounts = sushiRouter.swapExactTokensForTokens(\n            inputAmount,\n            minBzzReceived,\n            path,\n            address(this),\n            block.timestamp + 300 // 5 minute deadline\n        );\n        \n        return amounts[amounts.length - 1];\n    }\n    \n    /**\n     * @dev Get swap path for token to BZZ\n     */\n    function _getSwapPath(address inputToken) internal view returns (address[] memory) {\n        address[] memory path = new address[](2);\n        path[0] = inputToken;\n        path[1] = bzzToken;\n        return path;\n    }\n    \n    /**\n     * @dev Update contract configuration (owner only)\n     */\n    function updateConfig(\n        address _sushiRouter,\n        address _batchRegistry,\n        address _bzzToken,\n        address _defaultInputToken,\n        address _defaultPool\n    ) external onlyOwner {\n        sushiRouter = ISushiSwapV2Router(_sushiRouter);\n        batchRegistry = IBatchRegistry(_batchRegistry);\n        bzzToken = _bzzToken;\n        defaultInputToken = _defaultInputToken;\n        defaultPool = _defaultPool;\n        \n        emit ConfigUpdated(_sushiRouter, _batchRegistry, _bzzToken, _defaultInputToken, _defaultPool);\n    }\n    \n    /**\n     * @dev Emergency function to recover stuck tokens (owner only)\n     */\n    function emergencyRecover(address token, uint256 amount) external onlyOwner {\n        IERC20(token).safeTransfer(owner(), amount);\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}