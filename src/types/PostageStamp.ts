/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PostageStamp {
  export type ImportBatchStruct = {
    batchId: BytesLike;
    owner: AddressLike;
    depth: BigNumberish;
    bucketDepth: BigNumberish;
    immutableFlag: boolean;
    remainingBalance: BigNumberish;
  };

  export type ImportBatchStructOutput = [
    batchId: string,
    owner: string,
    depth: bigint,
    bucketDepth: bigint,
    immutableFlag: boolean,
    remainingBalance: bigint
  ] & {
    batchId: string;
    owner: string;
    depth: bigint;
    bucketDepth: bigint;
    immutableFlag: boolean;
    remainingBalance: bigint;
  };
}

export interface PostageStampInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "PAUSER_ROLE"
      | "PRICE_ORACLE_ROLE"
      | "REDISTRIBUTOR_ROLE"
      | "batchBucketDepth"
      | "batchDepth"
      | "batchImmutableFlag"
      | "batchLastUpdatedBlockNumber"
      | "batchNormalisedBalance"
      | "batchOwner"
      | "batches"
      | "bzzToken"
      | "copyBatch"
      | "copyBatchBulk"
      | "createBatch"
      | "currentTotalOutPayment"
      | "expireLimited"
      | "expiredBatchesExist"
      | "firstBatchId"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "increaseDepth"
      | "isBatchesTreeEmpty"
      | "lastExpiryBalance"
      | "lastPrice"
      | "lastUpdatedBlock"
      | "minimumBucketDepth"
      | "minimumInitialBalancePerChunk"
      | "minimumValidityBlocks"
      | "pause"
      | "paused"
      | "pot"
      | "remainingBalance"
      | "renounceRole"
      | "revokeRole"
      | "setMinimumValidityBlocks"
      | "setPrice"
      | "supportsInterface"
      | "topUp"
      | "totalPot"
      | "unPause"
      | "validChunkCount"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchCreated"
      | "BatchDepthIncrease"
      | "BatchTopUp"
      | "CopyBatchFailed"
      | "Paused"
      | "PotWithdrawn"
      | "PriceUpdate"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDISTRIBUTOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBucketDepth",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDepth",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchImmutableFlag",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchLastUpdatedBlockNumber",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchNormalisedBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "batches", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "bzzToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "copyBatch",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "copyBatchBulk",
    values: [PostageStamp.ImportBatchStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentTotalOutPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireLimited",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expiredBatchesExist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDepth",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBatchesTreeEmpty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastExpiryBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumBucketDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumInitialBalancePerChunk",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumValidityBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumValidityBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "topUp",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalPot", values?: undefined): string;
  encodeFunctionData(functionFragment: "unPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validChunkCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDISTRIBUTOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBucketDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchDepth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchImmutableFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchLastUpdatedBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchNormalisedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bzzToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copyBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "copyBatchBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentTotalOutPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireLimited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiredBatchesExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBatchesTreeEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastExpiryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumBucketDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumInitialBalancePerChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumValidityBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumValidityBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalPot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validChunkCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BatchCreatedEvent {
  export type InputTuple = [
    batchId: BytesLike,
    totalAmount: BigNumberish,
    normalisedBalance: BigNumberish,
    owner: AddressLike,
    depth: BigNumberish,
    bucketDepth: BigNumberish,
    immutableFlag: boolean
  ];
  export type OutputTuple = [
    batchId: string,
    totalAmount: bigint,
    normalisedBalance: bigint,
    owner: string,
    depth: bigint,
    bucketDepth: bigint,
    immutableFlag: boolean
  ];
  export interface OutputObject {
    batchId: string;
    totalAmount: bigint;
    normalisedBalance: bigint;
    owner: string;
    depth: bigint;
    bucketDepth: bigint;
    immutableFlag: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchDepthIncreaseEvent {
  export type InputTuple = [
    batchId: BytesLike,
    newDepth: BigNumberish,
    normalisedBalance: BigNumberish
  ];
  export type OutputTuple = [
    batchId: string,
    newDepth: bigint,
    normalisedBalance: bigint
  ];
  export interface OutputObject {
    batchId: string;
    newDepth: bigint;
    normalisedBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchTopUpEvent {
  export type InputTuple = [
    batchId: BytesLike,
    topupAmount: BigNumberish,
    normalisedBalance: BigNumberish
  ];
  export type OutputTuple = [
    batchId: string,
    topupAmount: bigint,
    normalisedBalance: bigint
  ];
  export interface OutputObject {
    batchId: string;
    topupAmount: bigint;
    normalisedBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CopyBatchFailedEvent {
  export type InputTuple = [index: BigNumberish, batchId: BytesLike];
  export type OutputTuple = [index: bigint, batchId: string];
  export interface OutputObject {
    index: bigint;
    batchId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PotWithdrawnEvent {
  export type InputTuple = [recipient: AddressLike, totalAmount: BigNumberish];
  export type OutputTuple = [recipient: string, totalAmount: bigint];
  export interface OutputObject {
    recipient: string;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdateEvent {
  export type InputTuple = [price: BigNumberish];
  export type OutputTuple = [price: bigint];
  export interface OutputObject {
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PostageStamp extends BaseContract {
  connect(runner?: ContractRunner | null): PostageStamp;
  waitForDeployment(): Promise<this>;

  interface: PostageStampInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  PRICE_ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  REDISTRIBUTOR_ROLE: TypedContractMethod<[], [string], "view">;

  batchBucketDepth: TypedContractMethod<
    [_batchId: BytesLike],
    [bigint],
    "view"
  >;

  batchDepth: TypedContractMethod<[_batchId: BytesLike], [bigint], "view">;

  batchImmutableFlag: TypedContractMethod<
    [_batchId: BytesLike],
    [boolean],
    "view"
  >;

  batchLastUpdatedBlockNumber: TypedContractMethod<
    [_batchId: BytesLike],
    [bigint],
    "view"
  >;

  batchNormalisedBalance: TypedContractMethod<
    [_batchId: BytesLike],
    [bigint],
    "view"
  >;

  batchOwner: TypedContractMethod<[_batchId: BytesLike], [string], "view">;

  batches: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, bigint, bigint] & {
        owner: string;
        depth: bigint;
        bucketDepth: bigint;
        immutableFlag: boolean;
        normalisedBalance: bigint;
        lastUpdatedBlockNumber: bigint;
      }
    ],
    "view"
  >;

  bzzToken: TypedContractMethod<[], [string], "view">;

  copyBatch: TypedContractMethod<
    [
      _owner: AddressLike,
      _initialBalancePerChunk: BigNumberish,
      _depth: BigNumberish,
      _bucketDepth: BigNumberish,
      _batchId: BytesLike,
      _immutable: boolean
    ],
    [void],
    "nonpayable"
  >;

  copyBatchBulk: TypedContractMethod<
    [bulkBatches: PostageStamp.ImportBatchStruct[]],
    [void],
    "nonpayable"
  >;

  createBatch: TypedContractMethod<
    [
      _owner: AddressLike,
      _initialBalancePerChunk: BigNumberish,
      _depth: BigNumberish,
      _bucketDepth: BigNumberish,
      _nonce: BytesLike,
      _immutable: boolean
    ],
    [string],
    "nonpayable"
  >;

  currentTotalOutPayment: TypedContractMethod<[], [bigint], "view">;

  expireLimited: TypedContractMethod<
    [limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  expiredBatchesExist: TypedContractMethod<[], [boolean], "view">;

  firstBatchId: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  increaseDepth: TypedContractMethod<
    [_batchId: BytesLike, _newDepth: BigNumberish],
    [void],
    "nonpayable"
  >;

  isBatchesTreeEmpty: TypedContractMethod<[], [boolean], "view">;

  lastExpiryBalance: TypedContractMethod<[], [bigint], "view">;

  lastPrice: TypedContractMethod<[], [bigint], "view">;

  lastUpdatedBlock: TypedContractMethod<[], [bigint], "view">;

  minimumBucketDepth: TypedContractMethod<[], [bigint], "view">;

  minimumInitialBalancePerChunk: TypedContractMethod<[], [bigint], "view">;

  minimumValidityBlocks: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pot: TypedContractMethod<[], [bigint], "view">;

  remainingBalance: TypedContractMethod<
    [_batchId: BytesLike],
    [bigint],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setMinimumValidityBlocks: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPrice: TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  topUp: TypedContractMethod<
    [_batchId: BytesLike, _topupAmountPerChunk: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalPot: TypedContractMethod<[], [bigint], "nonpayable">;

  unPause: TypedContractMethod<[], [void], "nonpayable">;

  validChunkCount: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRICE_ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REDISTRIBUTOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchBucketDepth"
  ): TypedContractMethod<[_batchId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchDepth"
  ): TypedContractMethod<[_batchId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchImmutableFlag"
  ): TypedContractMethod<[_batchId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchLastUpdatedBlockNumber"
  ): TypedContractMethod<[_batchId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchNormalisedBalance"
  ): TypedContractMethod<[_batchId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchOwner"
  ): TypedContractMethod<[_batchId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, bigint, bigint] & {
        owner: string;
        depth: bigint;
        bucketDepth: bigint;
        immutableFlag: boolean;
        normalisedBalance: bigint;
        lastUpdatedBlockNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bzzToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "copyBatch"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _initialBalancePerChunk: BigNumberish,
      _depth: BigNumberish,
      _bucketDepth: BigNumberish,
      _batchId: BytesLike,
      _immutable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "copyBatchBulk"
  ): TypedContractMethod<
    [bulkBatches: PostageStamp.ImportBatchStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBatch"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _initialBalancePerChunk: BigNumberish,
      _depth: BigNumberish,
      _bucketDepth: BigNumberish,
      _nonce: BytesLike,
      _immutable: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentTotalOutPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "expireLimited"
  ): TypedContractMethod<[limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expiredBatchesExist"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "firstBatchId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseDepth"
  ): TypedContractMethod<
    [_batchId: BytesLike, _newDepth: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBatchesTreeEmpty"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastExpiryBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdatedBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumBucketDepth"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumInitialBalancePerChunk"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumValidityBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "remainingBalance"
  ): TypedContractMethod<[_batchId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumValidityBlocks"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPrice"
  ): TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "topUp"
  ): TypedContractMethod<
    [_batchId: BytesLike, _topupAmountPerChunk: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalPot"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "unPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validChunkCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[beneficiary: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BatchCreated"
  ): TypedContractEvent<
    BatchCreatedEvent.InputTuple,
    BatchCreatedEvent.OutputTuple,
    BatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BatchDepthIncrease"
  ): TypedContractEvent<
    BatchDepthIncreaseEvent.InputTuple,
    BatchDepthIncreaseEvent.OutputTuple,
    BatchDepthIncreaseEvent.OutputObject
  >;
  getEvent(
    key: "BatchTopUp"
  ): TypedContractEvent<
    BatchTopUpEvent.InputTuple,
    BatchTopUpEvent.OutputTuple,
    BatchTopUpEvent.OutputObject
  >;
  getEvent(
    key: "CopyBatchFailed"
  ): TypedContractEvent<
    CopyBatchFailedEvent.InputTuple,
    CopyBatchFailedEvent.OutputTuple,
    CopyBatchFailedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PotWithdrawn"
  ): TypedContractEvent<
    PotWithdrawnEvent.InputTuple,
    PotWithdrawnEvent.OutputTuple,
    PotWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdate"
  ): TypedContractEvent<
    PriceUpdateEvent.InputTuple,
    PriceUpdateEvent.OutputTuple,
    PriceUpdateEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BatchCreated(bytes32,uint256,uint256,address,uint8,uint8,bool)": TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;
    BatchCreated: TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;

    "BatchDepthIncrease(bytes32,uint8,uint256)": TypedContractEvent<
      BatchDepthIncreaseEvent.InputTuple,
      BatchDepthIncreaseEvent.OutputTuple,
      BatchDepthIncreaseEvent.OutputObject
    >;
    BatchDepthIncrease: TypedContractEvent<
      BatchDepthIncreaseEvent.InputTuple,
      BatchDepthIncreaseEvent.OutputTuple,
      BatchDepthIncreaseEvent.OutputObject
    >;

    "BatchTopUp(bytes32,uint256,uint256)": TypedContractEvent<
      BatchTopUpEvent.InputTuple,
      BatchTopUpEvent.OutputTuple,
      BatchTopUpEvent.OutputObject
    >;
    BatchTopUp: TypedContractEvent<
      BatchTopUpEvent.InputTuple,
      BatchTopUpEvent.OutputTuple,
      BatchTopUpEvent.OutputObject
    >;

    "CopyBatchFailed(uint256,bytes32)": TypedContractEvent<
      CopyBatchFailedEvent.InputTuple,
      CopyBatchFailedEvent.OutputTuple,
      CopyBatchFailedEvent.OutputObject
    >;
    CopyBatchFailed: TypedContractEvent<
      CopyBatchFailedEvent.InputTuple,
      CopyBatchFailedEvent.OutputTuple,
      CopyBatchFailedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PotWithdrawn(address,uint256)": TypedContractEvent<
      PotWithdrawnEvent.InputTuple,
      PotWithdrawnEvent.OutputTuple,
      PotWithdrawnEvent.OutputObject
    >;
    PotWithdrawn: TypedContractEvent<
      PotWithdrawnEvent.InputTuple,
      PotWithdrawnEvent.OutputTuple,
      PotWithdrawnEvent.OutputObject
    >;

    "PriceUpdate(uint256)": TypedContractEvent<
      PriceUpdateEvent.InputTuple,
      PriceUpdateEvent.OutputTuple,
      PriceUpdateEvent.OutputObject
    >;
    PriceUpdate: TypedContractEvent<
      PriceUpdateEvent.InputTuple,
      PriceUpdateEvent.OutputTuple,
      PriceUpdateEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
